******** k8 AUtocomplet commands*****************
source <(kubectl completion bash) --for current shell
echo "source <(kubectl completion bash)" >> ~/.bashrc  -- for adding to profile


******Pod Short Command********

kubectl run nginx --image=nginx --generator=run-pod/v1


Adding resource quata
kubectl run nginx --image=nginx --generator=run-pod/v1 --limits='cpu=0.2,memory=10Mi' --requests='cpu=0.1,memory=5Mi'


Adding namespace
kubectl run nginx --image=nginx --generator=run-pod/v1 --limits='cpu=0.2,memory=10Mi' --requests='cpu=0.1,memory=5Mi' --name
space=dev


Create Service and POD
kubectl run nginx --image=nginx --generator=run-pod/v1 --limits='cpu=0.2,memory=10Mi' --requests='cpu=0.1,memory=5Mi' --name
space=qa --expose=true --service-generator='service/v2' --port=8080


Adding Labels
kubectl run nginx --image=nginx --generator=run-pod/v1 --limits='cpu=0.2,memory=10Mi' --requests='cpu=0.1,memory=5Mi' --name
space=prod --expose=true --service-generator='service/v2' --port=8080 --labels='env=prod,ver=1.0'

Dry-run true
kubectl run nginx --image=nginx --generator=run-pod/v1 --limits='cpu=0.2,memory=10Mi' --requests='cpu=0.1,memory=5Mi' 
--namespace=prod --expose=true --service-generator='service/v2' --port=8080 --labels='env=prod,ver=1.0' --dry-run -o yaml >> nginx_pod.yml

args to container
kubectl run liveness-exec --image=busybox --restart=Never --labels=test=liveness --dry-run -o yaml  -- /bin/sh -c 'touch 
/tmp/healthy; sleep 30; rm -rf /tmp/healthy; sleep 600'  >> liveness-exec.yaml

command to container
kubectl run liveness-exec --image=busybox --restart=Never --labels=test=liveness --dry-run -o yaml  --command -- /bin/sh -c 'touch 
/tmp/healthy; sleep 30; rm -rf /tmp/healthy; sleep 600'  >> liveness-exec.yaml

**********************************Deployment********************************************************

kubectl run nginx --image=nginx 


Adding resource quata
kubectl run nginx --image=nginx  --limits='cpu=0.2,memory=10Mi' --requests='cpu=0.1,memory=5Mi'


Adding namespace
kubectl run nginx --image=nginx  --limits='cpu=0.2,memory=10Mi' --requests='cpu=0.1,memory=5Mi' --name
space=dev


Create Service and Deployment
kubectl run nginx --image=nginx  --limits='cpu=0.2,memory=10Mi' --requests='cpu=0.1,memory=5Mi' --name
space=qa --expose=true --service-generator='service/v2' --port=8080


Adding Labels
kubectl run nginx --image=nginx  --limits='cpu=0.2,memory=10Mi' --requests='cpu=0.1,memory=5Mi' --name
space=prod --expose=true --service-generator='service/v2' --port=8080 --labels='env=prod,ver=1.0'

Dry-run true
kubectl run nginx --image=nginx  --limits='cpu=0.2,memory=10Mi' --requests='cpu=0.1,memory=5Mi' 
--namespace=prod --expose=true --service-generator='service/v2' --port=8080 --labels='env=prod,ver=1.0' --replicas=3 --dry-run -o yaml >> nginx_pod.yml


Deployment Rollout commands

kubectl rollout status deploy nginx-deployment
kubectl rollout history deploy nginx-deployment
kubectl rollout undo deploy nginx-deployment
kubectl rollout undo deploy nginx-deployment --to-revision=2
kubectl rollout pause deploy nginx-deployment
kubectl rollout resume deploy nginx-deployment

IMP configuration in Deployment
revisionhistory
progressDeadlineSeconds
replicas
strategy
  Recreate
  RollingUpdate
    maxSurge
    maxUnavailable
paused
minReadySeconds

if revision history limit is 0 , rollback is not possible.
if rollout is paused, rollout will not work unless it is resumed.

Scaling 
kubectl scale deploy nginx-deployment --replicas=5
kubectl scale deploy nginx-deployment --current-replics=2 --replicas=5


************************Services*******************************************
#Two port service
kubectl create svc clusterip my-svc --tcp=80:9376 --tcp=8080:9377 --dry-run -o yaml >> my-svc.yaml  

***********************Data Injection****************************************

ConfigMap:
kubectl create configmap 

**********************Logging and Monitoring***********************************
kubectl log <POD_NAME> -n=dev
kubectl log <POD_NAME> -c <CONTAINER_NAME> -n=dev
kubectl log <POD_NAME> -c <CONTAINER_NAME> -n=dev -f  ## Followup logs
kubectl log <POD_NAME> -p

*************************get information ******************************

kubectl get pod nginx -o yaml --export   #get information by stripping cluster info
kubectl get pod nginx -o yaml            #get info including cluster info
kubect  get pod nginx -w                 #watch pod for status changes

****************************go into container***********************
kubectl exec -it -n=myns nginx -- bash
